# grpc files for file transfers
GRPC_FILES := transfer_pb2.py transfer_pb2.pyi transfer_pb2_grpc.py transfer_pb2_grpc.pyi
GRPC_OUT := $(addprefix flix/lib/proto/,$(GRPC_FILES))
PROTO := flix/lib/proto/transfer.proto

# files for autogenerated client for general remote client api (remote extensions)
EXTENSION_DIR := flix/extension/
EXTENSION_API_OPENAPI := extension_api.yaml
EXTENSION_API_CONFIG := extension_api_config.yaml
EXTENSION_API_TEMPLATE_DIR := extension_api_templates
EXTENSION_API_TEMPLATES := $(wildcard $(EXTENSION_DIR)$(EXTENSION_API_TEMPLATE_DIR)/*.py.jinja)
EXTENSION_API_OUT := $(addprefix $(EXTENSION_DIR),extension_api)

all:build

.download: poetry.lock
	poetry install
	touch $@

$(GRPC_OUT): $(PROTO) .download
	poetry run python -m grpc_tools.protoc -I. --python_out=. --grpc_python_out=. --mypy_out=. --mypy_grpc_out=. $<

$(EXTENSION_API_OUT): .download $(addprefix $(EXTENSION_DIR),$(EXTENSION_API_OPENAPI) $(EXTENSION_API_CONFIG)) $(EXTENSION_API_TEMPLATES)
	rm -rf $@ && mkdir -p $@
	cd flix/extension && \
		poetry run openapi-python-client update \
			--path $(EXTENSION_API_OPENAPI) \
			 --meta none \
			 --config $(EXTENSION_API_CONFIG) \
			 --custom-template-path extension_api_templates

.PHONY: typecheck
typecheck: .download
	poetry run mypy

.PHONY: build
build:$(GRPC_OUT) $(EXTENSION_API_OUT) typecheck
	poetry build

.PHONY: publish
publish: build
	# requires POETRY_PYPI_TOKEN_PYPI to be set with an api key
	poetry publish

.PHONY: publish_test
publish_test: build
	# requires POETRY_PYPI_TOKEN_TESTPYPI to be set with an api key
	poetry publish -r testpypi
